// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __VS2__klein_hh__
#define __VS2__klein_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_VS2__klein
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VS2__klein
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VS2__klein
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



class array_of_String_var;

class array_of_String : public _CORBA_Unbounded_Sequence_String {
public:
  typedef array_of_String_var _var_type;
  inline array_of_String() {}
  inline array_of_String(const array_of_String& _s)
    : _CORBA_Unbounded_Sequence_String(_s) {}

  inline array_of_String(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_String(_max) {}
  inline array_of_String(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}



  inline array_of_String& operator = (const array_of_String& _s) {
    _CORBA_Unbounded_Sequence_String::operator=(_s);
    return *this;
  }
};

class array_of_String_out;

class array_of_String_var {
public:
  inline array_of_String_var() : _pd_seq(0) {}
  inline array_of_String_var(array_of_String* _s) : _pd_seq(_s) {}
  inline array_of_String_var(const array_of_String_var& _s) {
    if (_s._pd_seq)  _pd_seq = new array_of_String(*_s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~array_of_String_var() { if (_pd_seq)  delete _pd_seq; }
    
  inline array_of_String_var& operator = (array_of_String* _s) {
    if (_pd_seq)  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline array_of_String_var& operator = (const array_of_String_var& _s) {
    if (&_s != this) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new array_of_String;
        *_pd_seq = *_s._pd_seq;
      }
      else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
    }
    return *this;
  }
  inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline array_of_String* operator -> () { return _pd_seq; }
  inline const array_of_String* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator array_of_String& () const { return *_pd_seq; }
#else
  inline operator const array_of_String& () const { return *_pd_seq; }
  inline operator array_of_String& () { return *_pd_seq; }
#endif
    
  inline const array_of_String& in() const { return *_pd_seq; }
  inline array_of_String&       inout()    { return *_pd_seq; }
  inline array_of_String*&      out() {
    if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline array_of_String* _retn() { array_of_String* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class array_of_String_out;
  
private:
  array_of_String* _pd_seq;
};

class array_of_String_out {
public:
  inline array_of_String_out(array_of_String*& _s) : _data(_s) { _data = 0; }
  inline array_of_String_out(array_of_String_var& _s)
    : _data(_s._pd_seq) { _s = (array_of_String*) 0; }
  inline array_of_String_out(const array_of_String_out& _s) : _data(_s._data) {}
  inline array_of_String_out& operator = (const array_of_String_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline array_of_String_out& operator = (array_of_String* _s) {
    _data = _s;
    return *this;
  }
  inline operator array_of_String*&()  { return _data; }
  inline array_of_String*& ptr()       { return _data; }
  inline array_of_String* operator->() { return _data; }

  inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  array_of_String*& _data;

private:
  array_of_String_out();
  array_of_String_out& operator=(const array_of_String_var&);
};

struct MessageData {
  typedef _CORBA_ConstrType_Variable_Var<MessageData> _var_type;

  
  ::CORBA::Long uid;

  ::CORBA::String_member id;

  ::CORBA::String_member uName;

  ::CORBA::String_member text;



  void operator>>= (cdrStream &) const;
  void operator<<= (cdrStream &);
};

typedef MessageData::_var_type MessageData_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< MessageData,MessageData_var > MessageData_out;

class array_of_MessageData_var;

class array_of_MessageData : public _CORBA_Unbounded_Sequence< MessageData >  {
public:
  typedef array_of_MessageData_var _var_type;
  inline array_of_MessageData() {}
  inline array_of_MessageData(const array_of_MessageData& _s)
    : _CORBA_Unbounded_Sequence< MessageData > (_s) {}

  inline array_of_MessageData(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< MessageData > (_max) {}
  inline array_of_MessageData(_CORBA_ULong _max, _CORBA_ULong _len, MessageData* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< MessageData > (_max, _len, _val, _rel) {}



  inline array_of_MessageData& operator = (const array_of_MessageData& _s) {
    _CORBA_Unbounded_Sequence< MessageData > ::operator=(_s);
    return *this;
  }
};

class array_of_MessageData_out;

class array_of_MessageData_var {
public:
  inline array_of_MessageData_var() : _pd_seq(0) {}
  inline array_of_MessageData_var(array_of_MessageData* _s) : _pd_seq(_s) {}
  inline array_of_MessageData_var(const array_of_MessageData_var& _s) {
    if (_s._pd_seq)  _pd_seq = new array_of_MessageData(*_s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~array_of_MessageData_var() { if (_pd_seq)  delete _pd_seq; }
    
  inline array_of_MessageData_var& operator = (array_of_MessageData* _s) {
    if (_pd_seq)  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline array_of_MessageData_var& operator = (const array_of_MessageData_var& _s) {
    if (&_s != this) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new array_of_MessageData;
        *_pd_seq = *_s._pd_seq;
      }
      else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
    }
    return *this;
  }
  inline MessageData& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline array_of_MessageData* operator -> () { return _pd_seq; }
  inline const array_of_MessageData* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator array_of_MessageData& () const { return *_pd_seq; }
#else
  inline operator const array_of_MessageData& () const { return *_pd_seq; }
  inline operator array_of_MessageData& () { return *_pd_seq; }
#endif
    
  inline const array_of_MessageData& in() const { return *_pd_seq; }
  inline array_of_MessageData&       inout()    { return *_pd_seq; }
  inline array_of_MessageData*&      out() {
    if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline array_of_MessageData* _retn() { array_of_MessageData* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class array_of_MessageData_out;
  
private:
  array_of_MessageData* _pd_seq;
};

class array_of_MessageData_out {
public:
  inline array_of_MessageData_out(array_of_MessageData*& _s) : _data(_s) { _data = 0; }
  inline array_of_MessageData_out(array_of_MessageData_var& _s)
    : _data(_s._pd_seq) { _s = (array_of_MessageData*) 0; }
  inline array_of_MessageData_out(const array_of_MessageData_out& _s) : _data(_s._data) {}
  inline array_of_MessageData_out& operator = (const array_of_MessageData_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline array_of_MessageData_out& operator = (array_of_MessageData* _s) {
    _data = _s;
    return *this;
  }
  inline operator array_of_MessageData*&()  { return _data; }
  inline array_of_MessageData*& ptr()       { return _data; }
  inline array_of_MessageData* operator->() { return _data; }

  inline MessageData& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  array_of_MessageData*& _data;

private:
  array_of_MessageData_out();
  array_of_MessageData_out& operator=(const array_of_MessageData_var&);
};

#ifndef __ClientMessageboardInterface__
#define __ClientMessageboardInterface__
class ClientMessageboardInterface;
class _objref_ClientMessageboardInterface;
class _impl_ClientMessageboardInterface;

typedef _objref_ClientMessageboardInterface* ClientMessageboardInterface_ptr;
typedef ClientMessageboardInterface_ptr ClientMessageboardInterfaceRef;

class ClientMessageboardInterface_Helper {
public:
  typedef ClientMessageboardInterface_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_ClientMessageboardInterface, ClientMessageboardInterface_Helper> ClientMessageboardInterface_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_ClientMessageboardInterface,ClientMessageboardInterface_Helper > ClientMessageboardInterface_out;

#endif

// interface ClientMessageboardInterface
class ClientMessageboardInterface {
public:
  // Declarations for this interface type.
  typedef ClientMessageboardInterface_ptr _ptr_type;
  typedef ClientMessageboardInterface_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static inline _ptr_type _fromObjRef(omniObjRef* o) {
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_ClientMessageboardInterface :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  // IDL operations
  array_of_MessageData* getMessages();
  ::CORBA::Boolean setMessage(const char* message, ::CORBA::Long uid, const char* uName);
  ::CORBA::Boolean deleteMessage(::CORBA::Long uid, const ::MessageData& msgData);
  ::CORBA::Boolean createNewMessage(const char* message, ::CORBA::Long uid, const char* uName);
  MessageData* getNextMessage();
  MessageData* getPreviousMessage();

  // Constructors
  inline _objref_ClientMessageboardInterface()  { _PR_setobj(0); }  // nil
  _objref_ClientMessageboardInterface(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_ClientMessageboardInterface();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_ClientMessageboardInterface(const _objref_ClientMessageboardInterface&);
  _objref_ClientMessageboardInterface& operator = (const _objref_ClientMessageboardInterface&);
  // not implemented

  friend class ClientMessageboardInterface;
};

class _pof_ClientMessageboardInterface : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_ClientMessageboardInterface() : _OMNI_NS(proxyObjectFactory)(ClientMessageboardInterface::_PD_repoId) {}
  virtual ~_pof_ClientMessageboardInterface();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_ClientMessageboardInterface :
  public virtual omniServant
{
public:
  virtual ~_impl_ClientMessageboardInterface();

  virtual array_of_MessageData* getMessages() = 0;
  virtual ::CORBA::Boolean setMessage(const char* message, ::CORBA::Long uid, const char* uName) = 0;
  virtual ::CORBA::Boolean deleteMessage(::CORBA::Long uid, const ::MessageData& msgData) = 0;
  virtual ::CORBA::Boolean createNewMessage(const char* message, ::CORBA::Long uid, const char* uName) = 0;
  virtual MessageData* getNextMessage() = 0;
  virtual MessageData* getPreviousMessage() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};




class POA_ClientMessageboardInterface :
  public virtual _impl_ClientMessageboardInterface,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_ClientMessageboardInterface();

  inline ::ClientMessageboardInterface_ptr _this() {
    return (::ClientMessageboardInterface_ptr) _do_this(::ClientMessageboardInterface::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr



inline void
ClientMessageboardInterface::_marshalObjRef(::ClientMessageboardInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_VS2__klein
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_VS2__klein
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VS2__klein
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VS2__klein
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VS2__klein
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VS2__klein
#endif

#endif  // __VS2__klein_hh__

