// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __VS2_hh__
#define __VS2_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_VS2
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VS2
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VS2
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE VS2

_CORBA_MODULE_BEG

  class array_of_String_var;

  class array_of_String : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef array_of_String_var _var_type;
    inline array_of_String() {}
    inline array_of_String(const array_of_String& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline array_of_String(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline array_of_String(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline array_of_String& operator = (const array_of_String& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class array_of_String_out;

  class array_of_String_var {
  public:
    inline array_of_String_var() : _pd_seq(0) {}
    inline array_of_String_var(array_of_String* _s) : _pd_seq(_s) {}
    inline array_of_String_var(const array_of_String_var& _s) {
      if (_s._pd_seq)  _pd_seq = new array_of_String(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~array_of_String_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline array_of_String_var& operator = (array_of_String* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline array_of_String_var& operator = (const array_of_String_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new array_of_String;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline array_of_String* operator -> () { return _pd_seq; }
    inline const array_of_String* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator array_of_String& () const { return *_pd_seq; }
#else
    inline operator const array_of_String& () const { return *_pd_seq; }
    inline operator array_of_String& () { return *_pd_seq; }
#endif
      
    inline const array_of_String& in() const { return *_pd_seq; }
    inline array_of_String&       inout()    { return *_pd_seq; }
    inline array_of_String*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline array_of_String* _retn() { array_of_String* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class array_of_String_out;
    
  private:
    array_of_String* _pd_seq;
  };

  class array_of_String_out {
  public:
    inline array_of_String_out(array_of_String*& _s) : _data(_s) { _data = 0; }
    inline array_of_String_out(array_of_String_var& _s)
      : _data(_s._pd_seq) { _s = (array_of_String*) 0; }
    inline array_of_String_out(const array_of_String_out& _s) : _data(_s._data) {}
    inline array_of_String_out& operator = (const array_of_String_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline array_of_String_out& operator = (array_of_String* _s) {
      _data = _s;
      return *this;
    }
    inline operator array_of_String*&()  { return _data; }
    inline array_of_String*& ptr()       { return _data; }
    inline array_of_String* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    array_of_String*& _data;

  private:
    array_of_String_out();
    array_of_String_out& operator=(const array_of_String_var&);
  };

  struct ConnectInformationData {
    typedef _CORBA_ConstrType_Variable_Var<ConnectInformationData> _var_type;

    
    ::CORBA::String_member ip;

    ::CORBA::Long port;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ConnectInformationData::_var_type ConnectInformationData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ConnectInformationData,ConnectInformationData_var > ConnectInformationData_out;

  struct UserData {
    typedef _CORBA_ConstrType_Variable_Var<UserData> _var_type;

    
    ::CORBA::Long userID;

    ::CORBA::String_member userName;

    ::CORBA::String_member password;

    ::CORBA::Boolean isAdmin;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef UserData::_var_type UserData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< UserData,UserData_var > UserData_out;

  struct LoginInformation {
    typedef _CORBA_ConstrType_Variable_Var<LoginInformation> _var_type;

    
    ::CORBA::Boolean adminRights;

    ConnectInformationData server;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef LoginInformation::_var_type LoginInformation_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< LoginInformation,LoginInformation_var > LoginInformation_out;

  struct MessageData {
    typedef _CORBA_ConstrType_Variable_Var<MessageData> _var_type;

    
    ::CORBA::Long uid;

    ::CORBA::String_member id;

    ::CORBA::String_member uName;

    ::CORBA::String_member text;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef MessageData::_var_type MessageData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< MessageData,MessageData_var > MessageData_out;

  class array_of_MessageData_var;

  class array_of_MessageData : public _CORBA_Unbounded_Sequence< MessageData >  {
  public:
    typedef array_of_MessageData_var _var_type;
    inline array_of_MessageData() {}
    inline array_of_MessageData(const array_of_MessageData& _s)
      : _CORBA_Unbounded_Sequence< MessageData > (_s) {}

    inline array_of_MessageData(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< MessageData > (_max) {}
    inline array_of_MessageData(_CORBA_ULong _max, _CORBA_ULong _len, MessageData* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< MessageData > (_max, _len, _val, _rel) {}

  

    inline array_of_MessageData& operator = (const array_of_MessageData& _s) {
      _CORBA_Unbounded_Sequence< MessageData > ::operator=(_s);
      return *this;
    }
  };

  class array_of_MessageData_out;

  class array_of_MessageData_var {
  public:
    inline array_of_MessageData_var() : _pd_seq(0) {}
    inline array_of_MessageData_var(array_of_MessageData* _s) : _pd_seq(_s) {}
    inline array_of_MessageData_var(const array_of_MessageData_var& _s) {
      if (_s._pd_seq)  _pd_seq = new array_of_MessageData(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~array_of_MessageData_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline array_of_MessageData_var& operator = (array_of_MessageData* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline array_of_MessageData_var& operator = (const array_of_MessageData_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new array_of_MessageData;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline MessageData& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline array_of_MessageData* operator -> () { return _pd_seq; }
    inline const array_of_MessageData* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator array_of_MessageData& () const { return *_pd_seq; }
#else
    inline operator const array_of_MessageData& () const { return *_pd_seq; }
    inline operator array_of_MessageData& () { return *_pd_seq; }
#endif
      
    inline const array_of_MessageData& in() const { return *_pd_seq; }
    inline array_of_MessageData&       inout()    { return *_pd_seq; }
    inline array_of_MessageData*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline array_of_MessageData* _retn() { array_of_MessageData* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class array_of_MessageData_out;
    
  private:
    array_of_MessageData* _pd_seq;
  };

  class array_of_MessageData_out {
  public:
    inline array_of_MessageData_out(array_of_MessageData*& _s) : _data(_s) { _data = 0; }
    inline array_of_MessageData_out(array_of_MessageData_var& _s)
      : _data(_s._pd_seq) { _s = (array_of_MessageData*) 0; }
    inline array_of_MessageData_out(const array_of_MessageData_out& _s) : _data(_s._data) {}
    inline array_of_MessageData_out& operator = (const array_of_MessageData_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline array_of_MessageData_out& operator = (array_of_MessageData* _s) {
      _data = _s;
      return *this;
    }
    inline operator array_of_MessageData*&()  { return _data; }
    inline array_of_MessageData*& ptr()       { return _data; }
    inline array_of_MessageData* operator->() { return _data; }

    inline MessageData& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    array_of_MessageData*& _data;

  private:
    array_of_MessageData_out();
    array_of_MessageData_out& operator=(const array_of_MessageData_var&);
  };

#ifndef __VS2_mMessageboardServerInterface__
#define __VS2_mMessageboardServerInterface__
  class MessageboardServerInterface;
  class _objref_MessageboardServerInterface;
  class _impl_MessageboardServerInterface;
  
  typedef _objref_MessageboardServerInterface* MessageboardServerInterface_ptr;
  typedef MessageboardServerInterface_ptr MessageboardServerInterfaceRef;

  class MessageboardServerInterface_Helper {
  public:
    typedef MessageboardServerInterface_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MessageboardServerInterface, MessageboardServerInterface_Helper> MessageboardServerInterface_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MessageboardServerInterface,MessageboardServerInterface_Helper > MessageboardServerInterface_out;

#endif

  // interface MessageboardServerInterface
  class MessageboardServerInterface {
  public:
    // Declarations for this interface type.
    typedef MessageboardServerInterface_ptr _ptr_type;
    typedef MessageboardServerInterface_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_MessageboardServerInterface :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    char* getFatherName();
    array_of_String* getChildNames();
    array_of_MessageData* getMessages();
    MessageData* setHighlightedMessage(const char* messageID);
    MessageData* getHighlightedMessage();
    MessageData* getMessageWithId(const char* messageID);
    ::CORBA::Boolean setMessage(const char* message, const char* messageID, const ::VS2::UserData& uData);
    ::CORBA::Boolean deleteMessage(const char* messageID, const ::VS2::UserData& uData);
    ::CORBA::Boolean createNewMessage(const char* message, const ::VS2::UserData& uData);
    MessageData* getNextMessage();
    MessageData* getPreviousMessage();
    ConnectInformationData* connectToFather(const ::VS2::UserData& uData);
    ConnectInformationData* connectToChild(const char* childName);
    ::CORBA::Boolean publishOnChilds(const char* message, const char* messageID, const ::VS2::UserData& uData, ::CORBA::Boolean schalter);
    ::CORBA::Boolean publishOnFather(const char* message, const char* messageID, const ::VS2::UserData& uData);
    ::CORBA::Boolean saveMessage(const char* message, const char* messageID, const ::VS2::UserData& uData);
    void notifyFather(const ::VS2::UserData& uData);
    void saveFatherInformation(::CORBA::Long id, const char* name, const ::VS2::ConnectInformationData& ciData, const ::VS2::UserData& uData);
    void notifyChildren(const ::VS2::UserData& uData);
    void saveChildInformation(::CORBA::Long id, const char* name, const ::VS2::ConnectInformationData& ciData, const ::VS2::UserData& uData);
    ::CORBA::Boolean createMessageSoap(const char* message, const char* messageID, ::CORBA::Long serverNr, const ::VS2::UserData& uData);
    ::CORBA::Boolean modifyMessageSoap(const char* message, const char* messageID, ::CORBA::Long serverNr, const ::VS2::UserData& uData);
    ::CORBA::Boolean deleteMessageSoap(const char* messageID, const ::VS2::UserData& uData);

    // Constructors
    inline _objref_MessageboardServerInterface()  { _PR_setobj(0); }  // nil
    _objref_MessageboardServerInterface(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MessageboardServerInterface();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MessageboardServerInterface(const _objref_MessageboardServerInterface&);
    _objref_MessageboardServerInterface& operator = (const _objref_MessageboardServerInterface&);
    // not implemented

    friend class MessageboardServerInterface;
  };

  class _pof_MessageboardServerInterface : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MessageboardServerInterface() : _OMNI_NS(proxyObjectFactory)(MessageboardServerInterface::_PD_repoId) {}
    virtual ~_pof_MessageboardServerInterface();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MessageboardServerInterface :
    public virtual omniServant
  {
  public:
    virtual ~_impl_MessageboardServerInterface();

    virtual char* getFatherName() = 0;
    virtual array_of_String* getChildNames() = 0;
    virtual array_of_MessageData* getMessages() = 0;
    virtual MessageData* setHighlightedMessage(const char* messageID) = 0;
    virtual MessageData* getHighlightedMessage() = 0;
    virtual MessageData* getMessageWithId(const char* messageID) = 0;
    virtual ::CORBA::Boolean setMessage(const char* message, const char* messageID, const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean deleteMessage(const char* messageID, const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean createNewMessage(const char* message, const ::VS2::UserData& uData) = 0;
    virtual MessageData* getNextMessage() = 0;
    virtual MessageData* getPreviousMessage() = 0;
    virtual ConnectInformationData* connectToFather(const ::VS2::UserData& uData) = 0;
    virtual ConnectInformationData* connectToChild(const char* childName) = 0;
    virtual ::CORBA::Boolean publishOnChilds(const char* message, const char* messageID, const ::VS2::UserData& uData, ::CORBA::Boolean schalter) = 0;
    virtual ::CORBA::Boolean publishOnFather(const char* message, const char* messageID, const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean saveMessage(const char* message, const char* messageID, const ::VS2::UserData& uData) = 0;
    virtual void notifyFather(const ::VS2::UserData& uData) = 0;
    virtual void saveFatherInformation(::CORBA::Long id, const char* name, const ::VS2::ConnectInformationData& ciData, const ::VS2::UserData& uData) = 0;
    virtual void notifyChildren(const ::VS2::UserData& uData) = 0;
    virtual void saveChildInformation(::CORBA::Long id, const char* name, const ::VS2::ConnectInformationData& ciData, const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean createMessageSoap(const char* message, const char* messageID, ::CORBA::Long serverNr, const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean modifyMessageSoap(const char* message, const char* messageID, ::CORBA::Long serverNr, const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean deleteMessageSoap(const char* messageID, const ::VS2::UserData& uData) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __VS2_mLoginServerInterface__
#define __VS2_mLoginServerInterface__
  class LoginServerInterface;
  class _objref_LoginServerInterface;
  class _impl_LoginServerInterface;
  
  typedef _objref_LoginServerInterface* LoginServerInterface_ptr;
  typedef LoginServerInterface_ptr LoginServerInterfaceRef;

  class LoginServerInterface_Helper {
  public:
    typedef LoginServerInterface_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_LoginServerInterface, LoginServerInterface_Helper> LoginServerInterface_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_LoginServerInterface,LoginServerInterface_Helper > LoginServerInterface_out;

#endif

  // interface LoginServerInterface
  class LoginServerInterface {
  public:
    // Declarations for this interface type.
    typedef LoginServerInterface_ptr _ptr_type;
    typedef LoginServerInterface_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_LoginServerInterface :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    LoginInformation* login(const ::VS2::UserData& uData);
    ::CORBA::Boolean reg(const ::VS2::UserData& uData, const char* regData);

    // Constructors
    inline _objref_LoginServerInterface()  { _PR_setobj(0); }  // nil
    _objref_LoginServerInterface(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_LoginServerInterface();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_LoginServerInterface(const _objref_LoginServerInterface&);
    _objref_LoginServerInterface& operator = (const _objref_LoginServerInterface&);
    // not implemented

    friend class LoginServerInterface;
  };

  class _pof_LoginServerInterface : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_LoginServerInterface() : _OMNI_NS(proxyObjectFactory)(LoginServerInterface::_PD_repoId) {}
    virtual ~_pof_LoginServerInterface();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_LoginServerInterface :
    public virtual omniServant
  {
  public:
    virtual ~_impl_LoginServerInterface();

    virtual LoginInformation* login(const ::VS2::UserData& uData) = 0;
    virtual ::CORBA::Boolean reg(const ::VS2::UserData& uData, const char* regData) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_VS2
_CORBA_MODULE_BEG

  class MessageboardServerInterface :
    public virtual VS2::_impl_MessageboardServerInterface,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~MessageboardServerInterface();

    inline ::VS2::MessageboardServerInterface_ptr _this() {
      return (::VS2::MessageboardServerInterface_ptr) _do_this(::VS2::MessageboardServerInterface::_PD_repoId);
    }
  };

  class LoginServerInterface :
    public virtual VS2::_impl_LoginServerInterface,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~LoginServerInterface();

    inline ::VS2::LoginServerInterface_ptr _this() {
      return (::VS2::LoginServerInterface_ptr) _do_this(::VS2::LoginServerInterface::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_VS2
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
VS2::MessageboardServerInterface::_marshalObjRef(::VS2::MessageboardServerInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
VS2::LoginServerInterface::_marshalObjRef(::VS2::LoginServerInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_VS2
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_VS2
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VS2
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VS2
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VS2
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VS2
#endif

#endif  // __VS2_hh__

